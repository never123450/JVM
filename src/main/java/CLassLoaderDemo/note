运行时数据区
                                                    JVM运行时数据区
源代码 .java -> 编译 --> 字节码 .class -->    线程共享部分             线程独占部分
                                            方法区 堆内存            虚拟机栈 本地方法栈 程序计数器

JVM用来存储加载的类信息、常量、静态变量、编译后的代码等数据
虚拟机规范中这是一个逻辑区划。具体实现根据不同虚拟机来实现。
如: oracle的HotSpot在java7中方法区放在永久代，java8放 在元数据空间，并
且通过GC机制对这个区域进行管理


类生命周期
1、加载     1、读取二进制内容
2、验证     2、验证class文件格式规范、 语义分析、引用验证、字节码验证|
3、准备     3、分配内存、设置类static修饰的变量初始值
4、解析     4、类、接口、字段、类方法等解析
5、初始化   5、为静态变量赋值;执行静态代码块
6、使用     6、 创建实例对象
7、卸载     7、从JVM方法区中卸载


类加载器
类加载器负责装入类，搜索网络、jar、 zip、 文件夹、二进制数据、内存等指定位置的类资源。
一个java程序运行，最少有三个类加载器实例，负责不同类的加载。

1. Bootstrap loader  核心类库加载器
C/C++实现,无对应java类: null 加载JRE_ HOME/jre/lib目录,或用户配置的目录.JDK核心类库rt.jar... String..

2. Extension Class Loader  拓展类库加载器
ExtClassLoader的实例:加载JRE_ HOME/jre/lib/ext目录,JDK拓展包，或用户配置的目录

3. application class loader  用户应用程序加载器
AppClassLoader的实例:加载java.class.path指定的目录，用户应用程序class-path或者 java命令运行时参数-cp ..


验证问题：
查看类对应的加载器
JVM如何知道我们的类在哪里
类不会重复加载
类的卸载
双亲委派模型

通过JDK-API进行查看：java.lang.CLass.getClassloader()
返回装载类的类加载器
如果这个类是由bootstrapCLassLoader加载的，那么这个方法在这种实现中将返回null


JVM如何知道我们的类在何方
clas信息存放在不同的位置，桌面jar、 项目bin目录、target目 录等等..
查看openjdk源代码: sun.misc. Launcher. AppClassLoader
结论:读取java.class.path配置， 指定去哪些地址加载类资源
验证过程:利用jps、jcmd两个命令
1、jps查看 本机JAVA进程
2、查看运行时配置: jcmd 进程号VM.system_ properties

类不会重复加载
类的唯一性:同一个类加载器，类名-样，代表是同一个类。
识别方式: ClassLoader Instance id + PackageName + ClassName
验证方式:使用类加载器，对同一个class类的不同版本，进行多次加载，检查是否会加载到最新的代码。

类的卸载
类什么时候会卸载？
满足下面2个条件：
1、该class所有的实例都已经被GC
2、加载该类的CLassLoader实例已经被GC
验证方式：JVM启动中增加 -verbose:class参数，输出类加载和卸载的日志信息


双亲委派模型
bootstrap 顶层类加载器
ext拓展类库 类加载器
app用户 应用程序 类加载器
最底端 子类加载器

为了避免重复加载，由下到上逐级委托，由上到下逐级查找。
首先不会自己去尝试加载类，而是把这个请求委派给父加载器去完成;
每一个层次的加载器都是如此，因此所有的类加载请求都会传给上层的启动类加载器。
只有当父加载器反馈自己无法完成该加载请求(该加载器的搜索范围中没有找到对应的类)时，子加载器才会尝试自己去加载。
示例：LoaderTest


自动垃圾收集
自动垃圾收集是查看堆内存，识别正在使用哪些对象以及哪些对象未被删除以及删除未使用对象的过程。
使用中的对象或引用的对象意味着程序的某些部分仍然维护指向该对象的指针。
程序的任何部分都不再引用未使用的对象或未引用的对象，因此可以回收未引用对象使用的内存。
像C这样的编程语言中，分配和释放内存是一个手动过程。
在Java中，解除分配内存的过程由垃圾收集器自动处理。

如何确定内存需要被回收
该过程的第一步称为标记。这是垃圾收集器识别哪些内存正在使用而哪些内存不在使用的地方
不同类型内存的 判断方式
对象回收-引用计数
对象回收-可达性分析
方法区回收

可达性分析算法：
简单来说，将对象及其引用关系看作一个图，选定活动的对象作为GC Root，然后跟踪引用联调，
如果一个对象和GC Roots之间不可达，也就是不存在引用。那么，即可认为是可回收对象
可以作为GC Roots的对象：
1.虚拟机栈中正在引用的对象
2.本地方法栈中正在引用的对象
3.静态属性引用的对象
4.方法区常量引用的对象

引用类型和可达性级别
引用类型
1.强引用(StrongReference): 最常见的普通对象引用，只要还有强引用指向-个对象，就不会回收。
2.软引用(SoftReference): JVM认为内存不足时，才会去试图回收软引用指向的对象。(缓存场景)
3.弱引用(WeakReference): 虽然是引用，但随时可能被回收掉。
4.虚引用(PhantomReference): 不能通过它访问对象。对象被finalize以后，执行指定逻辑的机制(Cleaner)
可达性级别
1.强可达(Strongly Reachable): -个对象可以有- -个或多个线程可以不通过各种引用访问到的情况。
2.软可达(Softly Reachable):就是当我们只能通过软引用才能访问到对象的状态。
3.弱可达(Weakly Reachable):只能通过弱引用访问时的状态。当弱引用被清除的时候，就符合销毁条件。
4.幻象可达(Phantom Reachable):不存在其他引用，并且finalize过了，只有幻象引用指向这个对象。
5.不可达(unreachable): 意味着对象可以被清除了。

垃圾收集算法
标记-清除(Mark-Sweep)算法:首先标识出所有要回收的对象，然后进行清除。
标记、清除过程效率有限，有内存碎片化问题，不适合特别大的堆;收集算法基本基于标记清除的思路进行改进。

复制(Copying)算法:划分两块同等大小的区域，收集时将活着的对象复制到另-块区域。
拷贝过程中将对象顺序放置，就可以避免内存碎片化。复制+预留内存， 有一-定的浪费。

标记-整理(Mark-Compact):类似于标记-清除，但为避免内存碎片化，它会在清理过程中将对象移动，以确保
移动后的对象占用连续的内存空间。


分代收集
根据对象的存活周期，将内存划分为几个区域，不同区域采用合适的垃圾收集算法
新对象会分配到Eden，如果超过：-XX:PretenureSizeThreshold:设置大对象直接进入老年代的阈值

minor GC 一定次数未回收 对象移动到老年代  -XX:MaxTenuringThreshold

垃圾收集器
串行收集器- Serial GC -XX:+UseSerialGC
单个线程来执行所有垃圾收集工作，适合单处理器机器。
Client模式下JVM的默认选项
串行收集器- Serial Old -XX:+UseSerialOldGC
可以在老年代使用，它采用了标记-整理(Mark-Compact) 算法，区别于新生代的复制算法

垃圾收集器
并行收集器- Parallel GC -XX:+UseParallelGC
并行收集器- Parallel Old GC -XX:+UseParallelOldGC
server模式JVM的默认GC选择，整体算法和Serial比较相似，区别是新生代和老年代GC都是并行进行;
可以设置GC时间或吞吐量等值，可以自动进行适应性调整Eden, Survivor大小和MaxTenuringThreshold的值。
也称为吞吐量优先的GC:吞吐量=用户代码运行时间/ (用户代码运行时间+ GC时间)
-XX:ParallelGCThreads:设置用于垃圾回收的线程数。通常情况下可以和CPU数量相等。
-XX:MaxGCPauseMills:设置最大垃圾收集停顿时间。它的值是一-个大于0的整数。
-XX:GCTimeRatio:设置吞吐量大小，它的值是一个0-100之间的整数。
-XX:+UseAdaptiveSizePolicy:打开自适应GC策略。以达到在堆大小、吞吐量和停顿时间之间的平衡点。

垃圾收集器
并发收集器- CMS (Concurrent Mark Sweep) GC -XX:+UseConcMarkSweepGC
专用老年代，基于标记-清除(Mark-Sweep) 算法，设计目标是尽量减少停顿时间。
采用的标记-清除算法，存在着内存碎片化问题，长时间运行等情况下发生full GC，导致恶劣的停顿。
CMS会占用更多CPU资源，并和用户线程争抢。
减少了停顿时间，这一点对于互联网web等对时间敏感的系统非常重要，一直到今天，仍然有很多系统使用CMSGC
初始标记→并发标记→重新标记→并发清除
用户线程 stop-the-world


垃圾收集器
并行收集器- ParNew GC -XX:+UseParNewGC
新生代GC实现，它实际是Serial GC的多线程版本。
可以控制线程数量，参数: -XX:ParallelGCThreads
最常见的应用场景是配合老年代的CMS GC工作。参数-XX:+UseConcMarkSweepGC
用户线程   ->     多线程     ->         新生代回收
           stop-the-world

垃圾收集器
并发收集器-G1 -XX:+UseG1GC
针对大堆内存设计的收集器，兼顾吞吐量和停顿时间，JDK9后为默认选型，目标是替代CMS; .
G1将堆分成固定大小的区域，Region 之间是复制算法，但整体上实际可看作是标记-整理(MarkCompact) 算法,
可以有效地避免内存碎片。红色新生代(Eden和Surivor),淡蓝色老年代。找不到大内存时执行FullGC。


JDK内置工具- javap
javap -help --help -?           输出此用法消息
javap -version                  版本信息
javap -V -verbose               输出附加信息
javap -[                        17.09
javap -public                   仅显示公共类和成员，
javap -protected                显示受保护的/公共类和成员
javap -package                  显示程序包/受保护的/公共类和成员(默认)
javap -p -private               显示所有类和成员
javap -C                        对代码进行反汇编
javap -S                        输出内部类型签名
javap -sysinfo                  显示正在处理的类的系统信息(路径，大小，日期，MD5散列)
javap -constants                显示静态最终常量
javap -classpath <path>         指定查找用户类文件的位置
javap -bootclasspath <path>     覆盖引导类文件的位置

java反编译工具，主要用于根据Java字节码文件反汇编为Java源代码文件。
javap <options> <classes>


JDK内置工具- jps
jps -q                          仅输出VM标识符，不包括classname,jar
                                name,arguments in main method
jps -m                          输出main method的参数
jps-l                           输出完全的包名，应用主类名，jar的完全路径名
jps -V                          输出jvm参数
jps [options ] [ hostid ]       输出通过flag文件传递到JVM中的参数(.hotspotrc
jps -V                          文件或XX:Flags=所指定的文件
jps -Joption                    传递参数到vm,例如:-J-Xms512m

jps(Java Virtual Machine Process Status Tool) 显示当前所有java进程pid的命令

JDK内置工具- jstat
jstat监视Java虚拟机(JVM) 统计信息
用法: jstat [ generalOption| outputOptions vmid [ interval [s | ms] [ count ]]
-t参数可以在输出信息前面加上一个Timestamp列，显示程序运行的时间。
-h参数可以在周期性的数据输出时输出多少行数据后，跟着输出一-个表头信息。
interval指定输出统计周期，count指定输出多少次数据。


JDK内置工具- jstat
jstat -gc pid
昆示gc的信息，査看gc的次数及吋囘
jstat -gccapacity pid
内存GC分区中各対象的使用和占用大小
jstat -gcutil pid
統汁gc信息統汁
jstat -gcnew pid 167
年軽代対象的信息
jstat -gcnewcapacity pid
年軽代対象的信息及其占用量
jstat -gcold pid old
old代対象的信息
stat -gcoldcapacity pid old
代対象的信息及其占用量
jstat -gcpermcapacity pid perm
対象的信息及其占用量
jstat -class pid
足示加載class的数量，及所占空同等信息
jstat -compiler pid
昆示VM突吋編￥的数量等信息
stat -printcompilation pid
当前VM抗行的信息



JDK内置工具 - jcmd
jcmd工具，可以替代jps工具查看本地的jvm信息
jcmd-l
jcmd <pid | main class> <command .erfCounter.printl-f file>

jcmd
查看本地的java进程列表，获取其pid
jcmd pid help
查看其支持的命令列表
jcmd pid Thread.print-l
打印线程栈
jcmd pid VM.command_ line
打印启动命令及参数
jcmd pid GC.heap_ _dump /data/filename.dump
查看JVM的Heap Dump
jcmd pid GC.class_ histogram
查看类的统计信息
jcmd pid VM.system_ properties
查看系统属性内容
jcmd pid VM.uptime
查看虚拟机启动时间
jcmd pid PerfCounter.print
查看性能统计

JDK内置工具- jinfo
jinfo可以查看运行中jvm的全部参数，还可以设置部分参数。
info [ option ] pid
jinfo [ option ] executable core
jinfo [ option ] [server-id@]remote-hostname-or-lP

pid
对应jvm的进程id
executable core
产生core dump文件
[server-id@]remote-hostname-or-lP
远程的ip或者hostname, server-id标记服务的唯一性id
no option
输出全部的参数和系统属性
-flag name
输出对应名称的参数
-flag [+H-]name
开启或者关闭对应名称的参数
-flag name=value
设定对应名称的参数
-flags
输出全部的参数
-sysprops
输出系统属性

JDK内置工具- jhat
Java Head Analyse Tool分析java堆的命令，可以将堆中的对象以html的形式显示出来，支持对象查询语言0QL
jhat [-stack <bool>] [-refs <bool>] [-port <port>] [-baseline <file>] [-debug <int>] [-version] [-h)-help] <file>

J< flag>
启动JVM时传入启动参数
(例如: -J-Xmx512m则指定运行jhat的Java虚拟机使用的最大堆内存为512 MB)
-stack false[true
关闭对象分配调用栈跟踪(tracking object allocation call stack)。默认值为true
-refs false[true
关闭对象引用跟踪(tracking of references to objects)。默认值为true
-port port-number
设置jhat HTTP server的端口号;默认值7000
-exclude exclude-file
指定文件对象查询时需要排除的数据成员列表
(例如:如果文件列出了java.lang String.value，那么当从某个特定对象Object 0计算可达的对象
列表时，引用路径涉及java.lang. String.value的都会被排除。)
-baseline exclude-file
指定一个基准堆转储
在两个heap dumps中有相同object ID的对象会被标记为不是新的(marked as not being new),
其他对象被标记为新的(new)，在比较两个不同的堆转储时很有用。
-debug int
设置debug级别。0 表示不输出调试信息;值越大则表示输出更详细的debug信息
-version
启动后只显示版本信息就退出

JDK内置工具- jmap
打印出java进程内存中0bject的情况。或者将VM中的堆，以二进制输出成文本。
jmap [ option ] pid (to connect to remote debug server)
jmap [ option] executable core (to connect to remote debug server)
jmap [ option] [server-id@]remote-hostname-or-IP (to connect to remote debug server)

<no option>
无参，会打印目标JVM加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径
-dump:[live,]format=b,file=<filename>
使用hprof二进制输出heap内容到文件，live代表只输出存活对象
-finalizerinfo
打印正等候回收的对象的信息
-heap
打印heap的概要信息，GC使用的算法，heap的配置及wise heap的使用情况
-histo[:live]
打印每个class内存信息.，VM的内部类会加上前缀“★”，live代表只输出存活对象
-clstats
打印classload和jvm heap方法区的信息，每个classloader的名字 ,活泼性地址,父
classloader和加载的class数量。(另外内部String的数 量和占用内存数也会打印出来)
-F
强迫。在pid没有响应的时候使用dump或者-histo参数;在这个模式下，live子参 数无效
-h|-help
打印辅助信息
-J<flag>
传递参数给jmap启动的jvm

JDK内置工具-Jconsole
          -JvisualVM


调优基本概念
在调整性能时，JVM有三个组件:
1、堆大小调整
2、垃圾收集器调整
3、JIT编译器
大多数调优选项都与调整堆大小和为您的情况选择最合适的垃圾收集器有关。
JIT编译器对性能也有很大影响，但很少需要使用较新版本的JVM进行调优。
通常，在调优Java应用程序时，重点是以下两个主要目标之一:
响应性:应用程序或系统对请求的数据进行响应的速度，对于专注于响应性的应用程序,长的暂停时间是不可接受的，重
点是在短时间内做出回应。
吞吐量:侧重于在特定时间段内最大化应用程序的工作量,对于专注于吞吐量的应用程序，高暂停时间是可接受的。由于
高吞吐量应用程序在较长时间内专注于基准测试，因此不需要考虑快速响应时间。


常用JVM参数
-XX:+AlwaysPreTouch
jvm启动时分配内存，非使用时再分配
-XX: ErrorFile = filename
崩溃日志
-XX:+ TraceClassLoading
跟踪类加载信息
-XX:+PrintClassHistogram
按下Ctrl+Break后，打印类的信息
-Xmx -Xms
最大堆和最小堆
-xx:permSize、-xx:metaspaceSize
永久代/元数据空间
-XX:+HeapDumpOnOutOfMemoryError
00M时导出堆到文件
-XX:+HeapDumpPath
00M时堆导出的路径
-XX:OnOutOfMemoryError
在0OM时，执行-一个脚本
java -X:+PrintFlagsFinal -version打印所有的-XX参数和默认值
版本不断更新，JVM参 数和具体说明，建议需要时参考oracle官网的手册。


GC调优思路
1.分析场景
例如:启动速度慢;偶尔出现响应慢于平均水平或者出现卡顿
2.确定目标
内存占用、低延时、吞吐量
3.收集日志
通过参数配置收集GC日志;通过JDK工具查看GC状态
4. 分析日志
使用工具辅助分析日志，查看GC次数，GC时间
5.调整参数
切换垃圾收集器或者调整垃圾收集器参数


通用GC参数
-XX:ParallelGCThreads
并行GC线程数量
-XX:ConcGCThreads
并发GC线程数量
最大停顿时间，单位毫秒
-XX:MaxGCPauseMillis
GC尽力保证回收时间不超过设定值
0-100的取值范围
-XX:GCTimeRatio
垃圾收集时间占总时间的比
默认99,即最大允许1%时间做GC
设置Eden区大小和Survivor区大小的比例
-XX:SurvivorRatio
8表示两个Survivor :Eden=2:8,即-个Survivor占年轻代的1/10
新生代和老年代的比
-XX:NewRatio
4表示新生代:老年代=1:4,即年轻代占堆的1/5
-verbose:gc、-XX:+printGC
打印GC的简要信息
-XX:+PrintGCDetails
打印GC详细信息
-XX:+PrintGCTimeStamps
打印CG发生的时间戳
-Xloggc:log/gc.log
指定GC log的位置，以文件输出
-XX:+PrintHeapAtGC
每次一次GC后，都打印堆信息
